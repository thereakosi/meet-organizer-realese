import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import { db, auth } from "../firebase";
import LocationPicker from "./LocationPicker";

const MeetingForm = () => {
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [date, setDate] = useState("");
  const [type, setType] = useState("online");
  const [locationOrLink, setLocationOrLink] = useState("");
  const [category, setCategory] = useState("important");
  const [selectedCoords, setSelectedCoords] = useState(null);
  const [fileUrl, setFileUrl] = useState(null);
  const [participants, setParticipants] = useState("");
  const [tags, setTags] = useState("");

  const navigate = useNavigate();

  const handleSubmit = async (e) => {
  e.preventDefault();

  if (type === "offline" && !selectedCoords) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ");
    return;
  }

  const newMeeting = {
    title,
    description,
    date,
    type,
    LocationOrLink: type === "offline"
    ? { lat: selectedCoords.lat, lng: selectedCoords.lng }
    : locationOrLink,
    participants: participants.split(",").map((s) => s.trim()),
    tags: tags.split(",").map((s) => s.trim()),
    category,
    fileUrl,
    createdAt: serverTimestamp(),
    userId: auth.currentUser?.uid,
  };

  try {
    await addDoc(collection(db, "meetings"), newMeeting);
    navigate("/");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:", error);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É");
  }
};


  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append("file", file);
    formData.append("expires", "1d");

    try {
      const res = await fetch("https://uploadthing.com/api/files", {
        method: "POST",
        body: formData,
      });
      const data = await res.json();
      if (data?.url) setFileUrl(data.url);
      else throw new Error("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
    } catch (err) {
      console.error(err);
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");
    }
  };

  return (
    <div className="container mt-4">
      <h2>–ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞</h2>
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label className="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
          <input type="text" className="form-control" required value={title} onChange={(e) => setTitle(e.target.value)} />
        </div>

        <div className="mb-3">
          <label className="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
          <textarea className="form-control" rows="3" required value={description} onChange={(e) => setDescription(e.target.value)}></textarea>
        </div>

        <div className="mb-3">
          <label className="form-label">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</label>
          <input type="datetime-local" className="form-control" required value={date} onChange={(e) => setDate(e.target.value)} />
        </div>

        <div className="mb-3">
          <label className="form-label">–¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏</label>
          <select className="form-select" value={type} onChange={(e) => setType(e.target.value)}>
            <option value="online">–û–Ω–ª–∞–π–Ω</option>
            <option value="offline">–û—Ñ—Ñ–ª–∞–π–Ω</option>
          </select>
        </div>

        {type === "offline" && (
          <>
            <label className="form-label">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ</label>
            <LocationPicker onSelect={setSelectedCoords} />
            {selectedCoords && (
              <div className="text-muted">–í—ã–±—Ä–∞–Ω–æ: Lat: {selectedCoords.lat}, Lng: {selectedCoords.lng}</div>
            )}
          </>
        )}

        {type === "online" && (
          <div className="mb-3">
            <label className="form-label">–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É</label>
            <input type="text" className="form-control" value={locationOrLink} onChange={(e) => setLocationOrLink(e.target.value)} />
            <a
  href="https://meet.google.com/new"
  target="_blank"
  rel="noopener noreferrer"
  className="btn btn-outline-secondary mb-3"
>
  üîó –û—Ç–∫—Ä—ã—Ç—å Google Meet
</a>

          </div>
        )}
        <div className="mb-3">
          <label className="form-label">–§–∞–π–ª –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
          <input type="file" className="form-control" onChange={handleFileUpload} />
          {fileUrl && <div className="mt-2 text-success">–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: <a href={fileUrl} target="_blank" rel="noopener noreferrer">–û—Ç–∫—Ä—ã—Ç—å</a></div>}
        </div>

        <div className="mb-3">
          <label className="form-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏ (email –∏–ª–∏ –Ω–æ–º–µ—Ä, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
          <input type="text" className="form-control" value={participants} onChange={(e) => setParticipants(e.target.value)} />
        </div>

        <div className="mb-3">
          <label className="form-label">–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
          <input type="text" className="form-control" value={tags} onChange={(e) => setTags(e.target.value)} />
        </div>

        <div className="mb-4">
          <label className="form-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Å—Ç—Ä–µ—á–∏</label>
          <select className="form-select" value={category} onChange={(e) => setCategory(e.target.value)}>
            <option value="important">–í–∞–∂–Ω–æ</option>
            <option value="personal">–õ–∏—á–Ω–æ–µ</option>
            <option value="work">–†–∞–±–æ—á–µ–µ</option>
            <option value="other">–î—Ä—É–≥–æ–µ</option>
          </select>
        </div>

        <button type="submit" className="btn btn-success w-100">
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É
        </button>
      </form>
    </div>
  );
};

export default MeetingForm;
